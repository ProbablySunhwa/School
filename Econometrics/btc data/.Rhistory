ans
}
nfit <- factanal.fit.mle2(cv, factors, start[, 1], max(cn$lower,
0), cn$opt)
1L
start
for (i in 1L:nc) {
nfit <- factanal.fit.mle2(cv, factors, start[, i], max(cn$lower,
0), cn$opt)
if (cn$trace)
cat("start", i, "value:", format(nfit$criteria[1L]),
"uniqs:", format(as.vector(round(nfit$uniquenesses,
4))), "\n")
if (nfit$converged && nfit$criteria[1L] < best) {
fit <- nfit
best <- fit$criteria[1L]
}
}
nc <- ncol(start)
for (i in 1L:nc) {
nfit <- factanal.fit.mle2(cv, factors, start[, i], max(cn$lower,
0), cn$opt)
if (cn$trace)
cat("start", i, "value:", format(nfit$criteria[1L]),
"uniqs:", format(as.vector(round(nfit$uniquenesses,
4))), "\n")
if (nfit$converged && nfit$criteria[1L] < best) {
fit <- nfit
best <- fit$criteria[1L]
}
}
nc
start <- (1 - 0.5 * factors/p)/diag(solve(cv))
start
nc <- ncol(start)
nc
nc <- ncol(start)
nc
start <- as.matrix(start)
nc <- ncol(start)
nc
for (i in 1L:nc) {
nfit <- factanal.fit.mle2(cv, factors, start[, i], max(cn$lower,
0), cn$opt)
if (cn$trace)
cat("start", i, "value:", format(nfit$criteria[1L]),
"uniqs:", format(as.vector(round(nfit$uniquenesses,
4))), "\n")
if (nfit$converged && nfit$criteria[1L] < best) {
fit <- nfit
best <- fit$criteria[1L]
}
}
nfit <- factanal.fit.mle2(cv, factors, start[, 1], max(cn$lower,
0), cn$opt)
View(nfit)
nfit$loadings
load <- if (is.list(rot)) {
load <- rot$loadings
fit$rotmat <- if (inherits(rot, "GPArotation"))
t(solve(rot$Th))
else rot$rotmat
rot$loadings
}
load
View(cv)
cv <- S
cv <- cv/(sds %o% sds) # divide by variances
cv <- S
nfit <- factanal.fit.mle2(cv, factors, start[, 1], max(cn$lower,
0), cn$opt)
View(nfit)
nfit$loadings
View(A)
cv <- cv/(sds %o% sds) # divide by variances
nfit <- factanal.fit.mle2(cv, factors, start[, 1], max(cn$lower,
0), cn$opt)
View(nfit)
nfit$loadings
fit <- nfit
load <- fit$loadings
rot <- do.call(rotation, c(list(load), cn$rotate))
load <- if (is.list(rot)) {
load <- rot$loadings
fit$rotmat <- if (inherits(rot, "GPArotation"))
t(solve(rot$Th))
else rot$rotmat
rot$loadings
}
load
# -------------------------------------------------------------------- rotation
fit$loadings <- sortLoadings(load)
sortLoadings <- function(Lambda) {
cn <- colnames(Lambda)
Phi <- attr(Lambda, "covariance")
ssq <- apply(Lambda, 2L, function(x) -sum(x^2))
Lambda <- Lambda[, order(ssq), drop = FALSE]
colnames(Lambda) <- cn
neg <- colSums(Lambda) < 0
Lambda[, neg] <- -Lambda[, neg]
if (!is.null(Phi)) {
unit <- ifelse(neg, -1, 1)
attr(Lambda, "covariance") <- unit %*% Phi[order(ssq),
order(ssq)] %*% unit
}
Lambda # display
}
# -------------------------------------------------------------------- rotation
fit$loadings <- sortLoadings(load)
fit$loadings
View(factor_nominal)
Lambda_akko <- fit$loadings
save(Lambda_akko, file="Lambda.Rda")
View(Lambda_akko)
rm(Lambda_akko)
Lambda_akko <- load(Lambda.Rda)
Lambda_akko <- load("Lambda.Rda")
load("~/GitHub/School/Econometrics/Lambda.Rda")
View(Lambda_akko)
f_hat = X*Lambda
View(Lambda)
dim(X)
dim(Lambda)
f_hat = X%*%Lambda
f_hat = X%*%Lambda/3
View(f_hat)
# 12018.04.18 - at the moment running up to Lambda in factanl.fit.mle returns same loadings as A above
# it seems the difference is in a rotation in factanal
time = 1:141
df2 <- cbind(time, f_hat)
names(df2)
View(df2)
class(df2)
ggplot(df2, aes(time,V2)) + geom_point()
library(tidyverse)
ggplot(df2, aes(time,V2)) + geom_point()
df2 <- as.tibble(cbind(time, f_hat))
ggplot(df2, aes(time,V2)) + geom_point()
ggplot(df2, aes(time,V2)) + geom_line()
ggplot(df2, aes(time,-V2)) + geom_line()
ggplot(df2, aes(time,-V3)) + geom_line()
ggplot(df2, aes(time,-V2)) + geom_line()
f_hat1 = X%*%f[["loadings"]]/3
df1 <- as.tibble(cbind(time, f_hat1))
ggplot(df1, aes(time,-V2)) + geom_line()
View(df1)
View(f_hat)
View(f_hat1)
ggplot(df1, aes(time,-Factor1)) + geom_line()
ggplot(df1, aes(time,Factor1)) + geom_line()
ggplot(df1, aes(time,Factor2)) + geom_line()
ggplot(df1, aes(time,Factor3)) + geom_line()
bit_df <- read.csv("Bitcoin Charts Exchange Rate Data Browse.csv")
View(bit_df)
bit_dif
setwd("C:/Users/amgs2/Downloads")
btc_jpy <- read.csv("Bitcoin Markets (anxhkJPY).csv")
View(btc_jpy)
btc_jpy2 <- read.csv("Bitcoin Markets (btcexJPY).csv")
btc_jpy3 <- read.csv("Bitcoin Markets (coincheckJPY).csv")
btc_jpy4 <- read.csv("Bitcoin Markets (mtgoxJPY).csv")
btc_jpy5 <- read.csv("Bitcoin Markets (ruxumJPY).csv")
View(btc_jpy)
View(btc_jpy2)
View(btc_jpy3)
View(btc_jpy4)
View(btc_jpy5)
btc_krw <- read.csv("Bitcoin Markets (korbitKRW).csv")
btc_krw2 <- read.csv("Bitcoin Markets (krakenKRW).csv")
View(btc_krw)
View(btc_krw2)
btc_cad <- read.csv("Bitcoin Markets (lybitCAD).csv")
View(btc_cad)
btc_cad2 <- read.csv("Bitcoin Markets (coinbaseCAD).csv")
btc_cad3 <- read.csv("Bitcoin Markets (virtexCAD).csv")
btc_cad5 <- read.csv("Bitcoin Markets (weexCAD).csv")
btc_cad4 <- read.csv("Bitcoin Markets (localbtcCAD).csv")
View(btc_cad4)
View(btc_cad3)
btc_cny <- read.csv("Bitcoin Markets (btcnCAD).csv")
btc_cny <- read.csv("Bitcoin Markets (anxhxCNY).csv")
btc_cny <- read.csv("Bitcoin Markets (anxhkCNY).csv")
btc_cny2 <- read.csv("Bitcoin Markets (btcnCNY).csv")
btc_cny <- read.csv("Bitcoin Markets (mtgoxCNY).csv")
btc_cny <- read.csv("Bitcoin Markets (rmbtbCNY).csv")
btc_cny <- read.csv("Bitcoin Markets (anxhkCNY).csv")
btc_cny2 <- read.csv("Bitcoin Markets (btcnCNY).csv")
btc_cny3 <- read.csv("Bitcoin Markets (mtgoxCNY).csv")
btc_cny4 <- read.csv("Bitcoin Markets (rmbtbCNY).csv")
btc_cny5 <- read.csv("Bitcoin Markets (okcoinCNY).csv")
View(btc_cny2)
View(btc_cny5)
View(btc_cny)
View(btc_cny3)
View(btc_cny4)
View(btc_cny2)
View(btc_cny5)
btc_chf <- read.csv("Bitcoin Markets (anxhkCHF).csv")
btc_chf2 <- read.csv("Bitcoin Markets (localbtcCHF).csv")
btc_chf3 <- read.csv("Bitcoin Markets (ruxumCHF).csv")
View(btc_chf)
btc_gbp <- read.csv("Bitcoin Markets (bcGBP).csv")
btc_gbp <- read.csv("Bitcoin Markets (bcGBP).csv")
btc_gbp2 <- read.csv("Bitcoin Markets (bitmarketGBP).csv")
btc_gbp3 <- read.csv("Bitcoin Markets (coinbaseGBP).csv")
btc_gbp4 <- read.csv("Bitcoin Markets (ibwtGBP).csv")
btc_gbp5 <- read.csv("Bitcoin Markets (globalGBP).csv")
btc_gbp6 <- read.csv("Bitcoin Markets (coinfloorGBP).csv")
View(btc_gbp6)
btc_eur <- read.csv("Bitcoin Markets (aqoinEUR).csv")
btc_eur2 <- read.csv("Bitcoin Markets (b7EUR).csv")
btc_eur3 <- read.csv("Bitcoin Markets (btc2EUR).csv")
btc_eur4 <- read.csv("Bitcoin Markets (btceEUR).csv")
btc_eur5 <- read.csv("Bitcoin Markets (thEUR).csv")
View(btc_eur4)
btc_eur6 <- read.csv("Bitcoin Markets (bitcurexEUR).csv")
btc_eur7 <- read.csv("Bitcoin Markets (btc24EUR).csv")
btc_eur8 <- read.csv("Bitcoin Markets (btceurEUR).csv")
btc_eur9 <- read.csv("Bitcoin Markets (coinbaseEUR).csv")
btc_eur10 <- read.csv("Bitcoin Markets (cytrEUR).csv")
btc_eur11 <- read.csv("Bitcoin Markets (ftbtcEUR).csv")
btc_eur12 <- read.csv("Bitcoin Markets (krakenEUR).csv")
btc_eur13 <- read.csv("Bitcoin Markets (rippleEUR).csv")
btc_eur14 <- read.csv("Bitcoin Markets (thEUR).csv")
View(btc_eur12)
View(btc_eur6)
View(btc_eur4)
btc_mxn <- read.csv("Bitcoin Markets (localbtcMXN).csv")
View(btc_mxn)
btc_brl <- read.csv("mrcdBRL.csv")
View(btc_brl)
rm(btc_brl)
btc_hkd <- read.csv("Bitcoin Markets (anxhkHKD).csv")
btc_hkd2 <- read.csv("Bitcoin Markets (btchkexHKD).csv")
btc_hkd3 <- read.csv("Bitcoin Markets (localbtcHKD).csv")
btc_hkd4 <- read.csv("Bitcoin Markets (ruxumHKD).csv")
btc_sgd <- read.csv("Bitcoin Markets (localbtcSGD).csv")
btc_nxd <- read.csv("Bitcoin Markets (localbtcNZD).csv")
btc_pln <- read.csv("Bitcoin Markets (localbtcPLN).csv")
btc_rub <- read.csv("Bitcoin Markets (localbtcRUB).csv")
btc_thb <- read.csv("Bitcoin Markets (localbtcTHB).csv")
btc_usd <- read.csv("Bitcoin Markets (localbtcUSD).csv")
View(btc_pln)
View(btc_usd)
btc_chf2 <- read.csv("Bitcoin Markets (localbtcCHF).csv")
btc_chf4 <- read.csv("Bitcoin Markets (localbtcCHF (1)).csv")
btc_vnd <- read.csv("Bitcoin Markets (localbtcVND).csv")
btc_dkk <- read.csv("Bitcoin Markets (localbtcDKK).csv")
btc_czk <- read.csv("Bitcoin Markets (localbtcCZK).csv")
btc_inr <- read.csv("Bitcoin Markets (localbtcINR).csv")
btc_ils <- read.csv("Bitcoin Markets (localbtcILS).csv")
btc_aud <- read.csv("Bitcoin Markets (localbtcAUD).csv")
btc_nok <- read.csv("Bitcoin Markets (localbtcNOK).csv")
rm(btc_*)
rm(btc_\*)
rm("btc_\*")
rm("btc_*")
View(bit_df)
View(bit_df)
btc_usd <- read.csv("Bitcoin Markets (localbtcUSD).csv")
btc_cad <- read.csv("Bitcoin Markets (localbtcCAD).csv")
btc_mxn <- read.csv("Bitcoin Markets (localbtcMXN).csv")
btc_hkd <- read.csv("Bitcoin Markets (localbtcHKD).csv")
btc_sgd <- read.csv("Bitcoin Markets (localbtcSGD).csv")
btc_nxd <- read.csv("Bitcoin Markets (localbtcNZD).csv")
btc_pln <- read.csv("Bitcoin Markets (localbtcPLN).csv")
btc_rub <- read.csv("Bitcoin Markets (localbtcRUB).csv")
btc_thb <- read.csv("Bitcoin Markets (localbtcTHB).csv")
btc_ars <- read.csv("Bitcoin Markets (localbtcARS).csv")
btc_zar <- read.csv("Bitcoin Markets (localbtcZAR).csv")
btc_sek <- read.csv("Bitcoin Markets (localbtcSEK).csv")
btc_vnd <- read.csv("Bitcoin Markets (localbtcVND).csv")
btc_dkk <- read.csv("Bitcoin Markets (localbtcDKK).csv")
btc_czk <- read.csv("Bitcoin Markets (localbtcCZK).csv")
btc_inr <- read.csv("Bitcoin Markets (localbtcINR).csv")
btc_ils <- read.csv("Bitcoin Markets (localbtcILS).csv")
btc_aud <- read.csv("Bitcoin Markets (localbtcAUD).csv")
btc_nok <- read.csv("Bitcoin Markets (localbtcNOK).csv")
btc_jpy <- read.csv("Bitcoin Markets (coincheckJPY).csv")
btc_krw <- read.csv("Bitcoin Markets (korbitKRW).csv")
btc_cny <- read.csv("Bitcoin Markets (btcnCNY).csv") # winner but not all :(
btc_cny2 <- read.csv("Bitcoin Markets (okcoinCNY).csv") # close second
btc_gbp <- read.csv("Bitcoin Markets (coinfloorGBP).csv")
btc_eur <- read.csv("Bitcoin Markets (krakenEUR).csv") # winner (most recent)
btc_eur2 <- read.csv("Bitcoin Markets (btceEUR).csv") # has most
btc_eur3 <- read.csv("Bitcoin Markets (bitcurexEUR).csv") # alot too
setwd("~/GitHub/School/Econometrics/btc data")
btc_usd <- read.csv("Bitcoin Markets (localbtcUSD).csv")
btc_cad <- read.csv("Bitcoin Markets (localbtcCAD).csv")
btc_mxn <- read.csv("Bitcoin Markets (localbtcMXN).csv")
btc_hkd <- read.csv("Bitcoin Markets (localbtcHKD).csv")
btc_sgd <- read.csv("Bitcoin Markets (localbtcSGD).csv")
btc_nxd <- read.csv("Bitcoin Markets (localbtcNZD).csv")
btc_pln <- read.csv("Bitcoin Markets (localbtcPLN).csv")
btc_rub <- read.csv("Bitcoin Markets (localbtcRUB).csv")
btc_thb <- read.csv("Bitcoin Markets (localbtcTHB).csv")
btc_ars <- read.csv("Bitcoin Markets (localbtcARS).csv")
btc_zar <- read.csv("Bitcoin Markets (localbtcZAR).csv")
btc_sek <- read.csv("Bitcoin Markets (localbtcSEK).csv")
btc_vnd <- read.csv("Bitcoin Markets (localbtcVND).csv")
btc_dkk <- read.csv("Bitcoin Markets (localbtcDKK).csv")
btc_czk <- read.csv("Bitcoin Markets (localbtcCZK).csv")
btc_inr <- read.csv("Bitcoin Markets (localbtcINR).csv")
btc_ils <- read.csv("Bitcoin Markets (localbtcILS).csv")
btc_aud <- read.csv("Bitcoin Markets (localbtcAUD).csv")
btc_nok <- read.csv("Bitcoin Markets (localbtcNOK).csv")
btc_jpy <- read.csv("Bitcoin Markets (coincheckJPY).csv")
btc_krw <- read.csv("Bitcoin Markets (korbitKRW).csv")
btc_cny <- read.csv("Bitcoin Markets (btcnCNY).csv") # winner but not all :(
btc_cny2 <- read.csv("Bitcoin Markets (okcoinCNY).csv") # close second
btc_gbp <- read.csv("Bitcoin Markets (coinfloorGBP).csv")
btc_eur <- read.csv("Bitcoin Markets (krakenEUR).csv") # winner (most recent)
btc_eur2 <- read.csv("Bitcoin Markets (btceEUR).csv") # has most
btc_eur3 <- read.csv("Bitcoin Markets (bitcurexEUR).csv") # alot too
f_usd <- factanal(btc_usd,factors = 3) # actually got pretty close with this for the first two factors
f_usd <- factanal(btc_usd$"Weighted.Price",factors = 3) # actually got pretty close with this for the first two factors
df <- cbind(btc_usd$Weighted.Price, btc_krw$Weighted.Price)
View(btc_krw)
View(btc_usd)
df <- cbind(btc_usd$Weighted.Price, btc_aud$Weighted.Price)
View(df)
f <- factanal(df,factors = 1) # actually got pretty close with this for the first two factors
df2 <- cbind(btc_usd[1:1074,"Weighted.Price"])
m <- 1074
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_aud[1:m,"Weighted.Price"], btc_jpy[1:m,"Weighted.Price"])
View(df2)
f <- factanal(df,factors = 1) # actually got pretty close with this for the first two factors
f <- factanal(df2,factors = 1) # actually got pretty close with this for the first two factors
means = t(as.matrix(apply(df2,2,mean)))
X <- as.matrix(df - kronecker(matrix(1,m,1),means))
X <- as.matrix(df2 - kronecker(matrix(1,m,1),means))
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
View(df_time)
ggplot(df_time, aes(time,Factor1)) + geom_line()
View(btc_vnd)
View(btc_cny2)
View(btc_cny)
View(btc_eur)
View(btc_cny2)
View(btc_cny)
rm(btc_cny2)
View(btc_ars)
View(btc_aud)
View(btc_cad)
View(btc_cny)
View(btc_czk)
View(btc_dkk)
View(btc_eur)
View(btc_eur2)
View(btc_gbp)
View(btc_ils)
View(btc_inr)
View(btc_jpy)
View(btc_krw)
View(btc_mxn)
View(btc_nok)
View(btc_nxd)
View(btc_pln)
View(btc_rub)
View(btc_sek)
View(btc_sgd)
View(btc_thb)
View(btc_usd)
View(btc_vnd)
View(btc_zar)
m <- 939
df3 <- ldply(c("btc_usd", "btc_aud"))
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"])
btc_hkd <- read.csv("Bitcoin Markets (localbtcHKD).csv")
setwd("~/GitHub/School/Econometrics/btc data")
btc_hkd <- read.csv("Bitcoin Markets (localbtcHKD).csv")
btc_hkd <- read.csv("Bitcoin Markets (localbtcHKD).csv")
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"])
View(df2)
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"],
btc_pln[1:m,"Weighted.Price"], btc_rub[1:m,"Weighted.Price"], btc_thb[1:m,"Weighted.Price"],
btc_ars[1:m,"Weighted.Price"], btc_zar[1:m,"Weighted.Price"], btc_sek[1:m,"Weighted.Price"],
btc_vnd[1:m,"Weighted.Price"], btc_dkk[1:m,"Weighted.Price"], btc_czk[1:m,"Weighted.Price"],
btc_inr[1:m,"Weighted.Price"], btc_ils[1:m,"Weighted.Price"], btc_aud[1:m,"Weighted.Price"],
btc_nok[1:m,"Weighted.Price"], btc_jpy[1:m,"Weighted.Price"], btc_krw[1:m,"Weighted.Price"],
btc_gbp[1:m,"Weighted.Price"], btc_eur[1:m,"Weighted.Price"])
View(df2)
means = t(as.matrix(apply(df2,2,mean)))
X <- as.matrix(df2 - kronecker(matrix(1,m,1),means))
View(X)
View(df2)
View(means)
View(df2)
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"],
btc_pln[1:m,"Weighted.Price"], btc_rub[1:m,"Weighted.Price"], btc_thb[1:m,"Weighted.Price"],
btc_ars[1:m,"Weighted.Price"], btc_zar[1:m,"Weighted.Price"], btc_sek[1:m,"Weighted.Price"],
btc_dkk[1:m,"Weighted.Price"], btc_czk[1:m,"Weighted.Price"], btc_inr[1:m,"Weighted.Price"],
btc_ils[1:m,"Weighted.Price"], btc_aud[1:m,"Weighted.Price"], btc_nok[1:m,"Weighted.Price"],
btc_jpy[1:m,"Weighted.Price"], btc_krw[1:m,"Weighted.Price"],
btc_gbp[1:m,"Weighted.Price"], btc_eur[1:m,"Weighted.Price"])
means = t(as.matrix(apply(df2,2,mean)))
X <- as.matrix(df2 - kronecker(matrix(1,m,1),means))
View(X)
f <- factanal(df2,factors = 3) # actually got pretty close with this for the first two factors
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"],
btc_pln[1:m,"Weighted.Price"], btc_rub[1:m,"Weighted.Price"], btc_thb[1:m,"Weighted.Price"],
btc_ars[1:m,"Weighted.Price"], btc_zar[1:m,"Weighted.Price"], btc_sek[1:m,"Weighted.Price"],
btc_dkk[1:m,"Weighted.Price"], btc_czk[1:m,"Weighted.Price"], btc_inr[1:m,"Weighted.Price"],
btc_ils[1:m,"Weighted.Price"], btc_aud[1:m,"Weighted.Price"], btc_nok[1:m,"Weighted.Price"],
btc_jpy[1:m,"Weighted.Price"], btc_krw[1:m,"Weighted.Price"],
btc_gbp[1:m,"Weighted.Price"], btc_eur[1:m,"Weighted.Price"])
means = t(as.matrix(apply(df2,2,mean)))
X <- as.matrix(df2 - kronecker(matrix(1,m,1),means))
f <- factanal(X,factors = 3) # actually got pretty close with this for the first two factors
View(X)
f <- factanal(X,factors = 1) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 3) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 2) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 3) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 4) # actually got pretty close with this for the first two factors
f <- factanal(X) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 1) # actually got pretty close with this for the first two factors
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
ggplot(df_time, aes(time,Factor1)) + geom_line()
rm(f)
f <- factanal(X,factors = 3) # actually got pretty close with this for the first two factors
f <- factanal(X,factors = 3, lower = 0.01) # actually got pretty close with this for the first two factors
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
ggplot(df_time, aes(time,Factor1)) + geom_line()
ggplot(df_time, aes(time,Factor2)) + geom_line()
ggplot(df_time, aes(time,Factor3)) + geom_line()
f <- factanal(X,factors = 3, rotation = "varimax", lower = 0.01) # actually got pretty close with this for the first two factors
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
ggplot(df_time, aes(time,Factor1)) + geom_line()
ggplot(df_time, aes(time,Factor2)) + geom_line()
ggplot(df_time, aes(time,Factor3)) + geom_line()
View(X)
View(means)
# df3 <- ldply(c("btc_usd", "btc_aud"))
df3 <- ln(df2)
# df3 <- ldply(c("btc_usd", "btc_aud"))
df3 <- log(df2)
View(df3)
means = t(as.matrix(apply(df3,2,mean)))
X <- as.matrix(df3 - kronecker(matrix(1,m,1),means))
View(means)
# df3 <- ldply(c("btc_usd", "btc_aud"))
df2[df2 == 0] <- NA
df3 <- log(df2)
means = t(as.matrix(apply(df3,2,mean)))
View(means)
X <- as.matrix(df3 - kronecker(matrix(1,m,1),means, na.rm=TRUE))
df4 <- na.omit(df3)
X <- as.matrix(df4 - kronecker(matrix(1,m,1),means))
View(X)
View(means)
# df3 <- ldply(c("btc_usd", "btc_aud"))
df2[df2 == 0] <- NA
df3 <- log(df2)
df4 <- na.omit(df3)
means = t(as.matrix(apply(df4,2,mean)))
X <- as.matrix(df4 - kronecker(matrix(1,m,1),means))
View(means)
View(df4)
X <- as.matrix(df4 - kronecker(matrix(1,340,1),means))
f <- factanal(X,factors = 3, rotation = "varimax", lower = 0.01) # actually got pretty close with this for the first two factors
f_hat1 = X%*%f[["loadings"]]/3
m <- size(df4)
m <- dim(df4)
m <- dim(df4)$1
m <- dim(df4)[1]
X <- as.matrix(df4 - kronecker(matrix(1,m,1),means))
f <- factanal(X,factors = 3, rotation = "varimax", lower = 0.01) # try 3 factors at first
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
ggplot(df_time, aes(time,Factor1)) + geom_line()
ggplot(df_time, aes(time,Factor2)) + geom_line()
ggplot(df_time, aes(time,Factor3)) + geom_line()
f[["loadings"]]
df2 <- cbind(btc_usd[1:m,"Weighted.Price"], btc_cad[1:m,"Weighted.Price"], btc_sgd[1:m,"Weighted.Price"],
btc_hkd[1:m,"Weighted.Price"], btc_mxn[1:m,"Weighted.Price"], btc_nxd[1:m,"Weighted.Price"],
btc_pln[1:m,"Weighted.Price"], btc_rub[1:m,"Weighted.Price"], btc_thb[1:m,"Weighted.Price"],
btc_ars[1:m,"Weighted.Price"], btc_zar[1:m,"Weighted.Price"], btc_sek[1:m,"Weighted.Price"],
btc_dkk[1:m,"Weighted.Price"], btc_czk[1:m,"Weighted.Price"], btc_inr[1:m,"Weighted.Price"],
btc_ils[1:m,"Weighted.Price"], btc_aud[1:m,"Weighted.Price"], btc_nok[1:m,"Weighted.Price"],
btc_jpy[1:m,"Weighted.Price"], btc_krw[1:m,"Weighted.Price"],
btc_gbp[1:m,"Weighted.Price"], btc_eur[1:m,"Weighted.Price"])
# df3 <- ldply(c("btc_usd", "btc_aud"))
df2[df2 == 0] <- NA # set 0's to NA (therwise when take logs will be infinity)
df3 <- na.omit(df2) # remove rows with missing data
df4 <- log(df3) # take logs to map data to clearer values
View(df4)
m <- dim(df4)[1]
means = t(as.matrix(apply(df4,2,mean)))
X <- as.matrix(df4 - kronecker(matrix(1,m,1),means))
f <- factanal(X,factors = 3, rotation = "varimax", lower = 0.01) # try 3 factors at first
f_hat1 = X%*%f[["loadings"]]/3
time <- 1:m
df_time <- as.tibble(cbind(time, f_hat1))
ggplot(df_time, aes(time,Factor1)) + geom_line()
ggplot(df_time, aes(time,Factor2)) + geom_line()
ggplot(df_time, aes(time,Factor3)) + geom_line() # they are pretty much the same ... only 1 factor then? hmm odd
f[["loadings"]]
